// frontend/src/components/RoiManagement.tsx
import { useQuery, useMutation } from '@tanstack/react-query';
import { 
  Box, 
  Paper, 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableRow, 
  Button, 
  CircularProgress,
  Alert
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers';
import { apiClient } from '../lib/api';
import { Property, RoiDistribution, PayoutSchedule } from '../lib/types';

const RoiManagement = ({ property }: { property: Property }) => {
  const { data: performance, isLoading } = useQuery({
    queryKey: ['roiPerformance', property.id],
    queryFn: () => apiClient.get(`/api/admin/roi/${property.id}/performance`).then(res => res.data),
  });

  const { mutate: triggerDistribution } = useMutation({
    mutationFn: (amount: number) => 
      apiClient.post(`/api/admin/roi/${property.id}/distributions`, { amount }),
    onSuccess: () => {
      // Refresh data
    },
  });

  return (
    <Paper sx={{ p: 3, mt: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
        <h2>ROI Management - {property.title}</h2>
        <Button 
          variant="contained" 
          onClick={() => triggerDistribution(property.currentFunding * 0.08)}
        >
          Trigger Monthly Payout
        </Button>
      </Box>

      {isLoading ? <CircularProgress /> : (
        <Box sx={{ mb: 4 }}>
          <h3>Performance Overview</h3>
          <Table>
            <TableBody>
              <TableRow>
                <TableCell>Total Distributed</TableCell>
                <TableCell>${performance?.totalDistributed?.toLocaleString() || 0}</TableCell>
              </TableRow>
              <TableRow>
                <TableCell>Pending Payouts</TableCell>
                <TableCell>${performance?.pendingAmount?.toLocaleString() || 0}</TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </Box>
      )}

      <Box sx={{ mb: 4 }}>
        <h3>Payout Schedule</h3>
        <PayoutSchedulesTable propertyId={property.id} />
      </Box>

      <Box>
        <h3>Distribution History</h3>
        <RoiDistributionsTable propertyId={property.id} />
      </Box>
    </Paper>
  );
};

const PayoutSchedulesTable = ({ propertyId }: { propertyId: string }) => {
  const { data: schedules, isLoading } = useQuery<PayoutSchedule[]>({
    queryKey: ['payoutSchedules', propertyId],
    queryFn: () => apiClient.get(`/api/admin/roi/${propertyId}/schedules`).then(res => res.data),
  });

  // Implement schedule CRUD operations
  return (
    <Table>
      <TableHead>
        <TableRow>
          <TableCell>Frequency</TableCell>
          <TableCell>Start Date</TableCell>
          <TableCell>Amount</TableCell>
          <TableCell>Actions</TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {schedules?.map(schedule => (
          <TableRow key={schedule.id}>
            <TableCell>{schedule.frequency}</TableCell>
            <TableCell>{new Date(schedule.startDate).toLocaleDateString()}</TableCell>
            <TableCell>
              {schedule.amountType === 'percentage' ? 
                `${schedule.amountValue}%` : 
                `$${schedule.amountValue.toLocaleString()}`
              }
            </TableCell>
            <TableCell>
              <Button size="small">Edit</Button>
              <Button size="small" color="error">Delete</Button>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};