I'll provide a comprehensive implementation plan for the user management system, following your existing architecture patterns and focusing on production-ready practices. Let's break this down into key components:

### 1. Enhanced User Filtering & Search System
**Backend Implementation:**
```typescript
// shared/schema.ts
export const userStatusEnum = pgEnum('user_status', [
  'active',
  'suspended',
  'deactivated'
]);

export const kycStatusEnum = pgEnum('kyc_status', [
  'unverified',
  'pending',
  'verified',
  'rejected'
]);

export const users = pgTable('users', {
  id: uuid('id').primaryKey().defaultRandom(),
  email: varchar('email', { length: 255 }).unique().notNull(),
  firstName: varchar('first_name', { length: 100 }),
  lastName: varchar('last_name', { length: 100 }),
  status: userStatusEnum('status').notNull().default('active'),
  kycStatus: kycStatusEnum('kyc_status').notNull().default('unverified'),
  investorType: varchar('investor_type', { length: 20 }), // 'retail' | 'accredited'
  lastLogin: timestamp('last_login'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

// backend/src/routes/admin/users.ts
import { and, or, ilike, eq, gt, lt } from 'drizzle-orm';

router.get('/', adminAuth, async (req, res) => {
  const { 
    status, 
    kycStatus, 
    investorType,
    search,
    createdAfter,
    lastLoginBefore 
  } = req.query;

  const query = db
    .select()
    .from(users)
    .where(and(
      status ? eq(users.status, status) : undefined,
      kycStatus ? eq(users.kycStatus, kycStatus) : undefined,
      investorType ? eq(users.investorType, investorType) : undefined,
      createdAfter ? gt(users.createdAt, new Date(createdAfter)) : undefined,
      lastLoginBefore ? lt(users.lastLogin, new Date(lastLoginBefore)) : undefined,
      search ? or(
        ilike(users.email, `%${search}%`),
        ilike(users.firstName, `%${search}%`),
        ilike(users.lastName, `%${search}%`)
      ) : undefined
    ))
    .orderBy(desc(users.createdAt));

  try {
    const result = await query;
    res.json(result);
  } catch (error) {
    handleServerError(res, error, 'Failed to fetch users');
  }
});
```

**Frontend Implementation:**
```tsx
// client/src/components/UserManagement/UserFilters.tsx
import { useForm } from 'react-hook-form';
import { Grid, Button, Chip } from '@mui/material';
import { DatePicker, MultiSelect } from '@/components/Form';

type Filters = {
  status: string[];
  kycStatus: string[];
  investorType: string[];
  search: string;
  createdAfter: Date | null;
};

export const UserFilters = ({ onSubmit }: { onSubmit: (filters: Filters) => void }) => {
  const { control, handleSubmit } = useForm<Filters>();

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <Grid container spacing={2}>
        <Grid item xs={12} md={4}>
          <MultiSelect
            name="status"
            control={control}
            label="Account Status"
            options={['active', 'suspended', 'deactivated']}
          />
        </Grid>
        
        <Grid item xs={12} md={4}>
          <MultiSelect
            name="kycStatus"
            control={control}
            label="KYC Status"
            options={['unverified', 'pending', 'verified', 'rejected']}
          />
        </Grid>

        <Grid item xs={12} md={4}>
          <DatePicker
            name="createdAfter"
            control={control}
            label="Registered After"
          />
        </Grid>

        <Grid item xs={12}>
          <div className="flex gap-2">
            <Button type="submit" variant="contained">
              Apply Filters
            </Button>
            <Button type="reset" variant="outlined">
              Clear
            </Button>
          </div>
        </Grid>
      </Grid>
    </form>
  );
};
```

### 2. Comprehensive User Detail View
**Backend Implementation:**
```typescript
// backend/src/routes/admin/users.ts
router.get('/:id', adminAuth, async (req, res) => {
  try {
    const user = await db
      .select()
      .from(users)
      .leftJoin(wallets, eq(users.id, wallets.userId))
      .where(eq(users.id, req.params.id));

    if (!user) return res.status(404).json({ error: 'User not found' });
    
    res.json({
      ...user,
      wallet: user.wallets[0] // Assuming 1:1 user-wallet relationship
    });
  } catch (error) {
    handleServerError(res, error, 'Failed to fetch user details');
  }
});

router.patch('/:id', adminAuth, async (req, res) => {
  const updates = pick(req.body, ['firstName', 'lastName', 'investorType']);
  
  try {
    const updatedUser = await db
      .update(users)
      .set({
        ...updates,
        updatedAt: new Date()
      })
      .where(eq(users.id, req.params.id))
      .returning();

    res.json(updatedUser[0]);
  } catch (error) {
    handleServerError(res, error, 'Failed to update user');
  }
});
```

**Frontend Implementation:**
```tsx
// client/src/components/UserManagement/UserDetail.tsx
import { useQuery, useMutation } from '@tanstack/react-query';
import { EditableField } from '@/components/EditableField';

export const UserDetail = ({ userId }: { userId: string }) => {
  const { data: user, isLoading, refetch } = useQuery({
    queryKey: ['user', userId],
    queryFn: () => apiClient.get(`/api/admin/users/${userId}`)
  });

  const { mutate: updateUser } = useMutation({
    mutationFn: (updates: Partial<User>) => 
      apiClient.patch(`/api/admin/users/${userId}`, updates),
    onSuccess: () => refetch()
  });

  if (isLoading) return <CircularProgress />;
  if (!user) return <Alert severity="error">User not found</Alert>;

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <EditableField
          label="First Name"
          value={user.firstName}
          onSave={(value) => updateUser({ firstName: value })}
        />
        
        <EditableField
          label="Last Name"
          value={user.lastName}
          onSave={(value) => updateUser({ lastName: value })}
        />
        
        <EditableField
          label="Investor Type"
          value={user.investorType}
          type="select"
          options={['retail', 'accredited']}
          onSave={(value) => updateUser({ investorType: value })}
        />
      </div>

      <Divider />

      <UserStatusManager user={user} onUpdate={refetch} />
      <UserWalletInfo user={user} />
    </div>
  );
};
```

### 3. Account Status Management System
**Backend Implementation:**
```typescript
// backend/src/routes/admin/users.ts
router.post('/:id/status', adminAuth, async (req, res) => {
  const { status } = req.body;
  const validStatuses = ['active', 'suspended', 'deactivated'];

  if (!validStatuses.includes(status)) {
    return res.status(400).json({ error: 'Invalid status value' });
  }

  try {
    const updatedUser = await db
      .update(users)
      .set({ 
        status,
        updatedAt: new Date()
      })
      .where(eq(users.id, req.params.id))
      .returning();

    // Audit log implementation
    await createAuditLog({
      userId: req.user.id,
      action: 'USER_STATUS_CHANGE',
      targetId: req.params.id,
      details: { newStatus: status }
    });

    res.json(updatedUser[0]);
  } catch (error) {
    handleServerError(res, error, 'Failed to update user status');
  }
});
```

**Frontend Implementation:**
```tsx
// client/src/components/UserManagement/UserStatusManager.tsx
import { useConfirm } from 'material-ui-confirm';

export const UserStatusManager = ({ user, onUpdate }) => {
  const confirm = useConfirm();
  
  const handleStatusChange = async (newStatus: string) => {
    try {
      await confirm({
        title: 'Confirm Status Change',
        description: `Are you sure you want to change this user's status to ${newStatus}?`,
        confirmationText: 'Confirm'
      });
      
      await apiClient.post(`/api/admin/users/${user.id}/status`, { status: newStatus });
      onUpdate();
    } catch (error) {
      // Error handling
    }
  };

  return (
    <div className="space-y-4">
      <Typography variant="h6">Account Status</Typography>
      <div className="flex items-center gap-4">
        <Chip 
          label={user.status} 
          color={
            user.status === 'active' ? 'success' : 
            user.status === 'suspended' ? 'warning' : 'error'
          }
        />
        
        <Select
          value={user.status}
          onChange={(e) => handleStatusChange(e.target.value)}
          sx={{ minWidth: 120 }}
        >
          <MenuItem value="active">Active</MenuItem>
          <MenuItem value="suspended">Suspended</MenuItem>
          <MenuItem value="deactivated">Deactivated</MenuItem>
        </Select>
      </div>
    </div>
  );
};
```

### 4. Wallet Integration & Transaction History
**Backend Implementation:**
```typescript
// backend/src/routes/admin/users.ts
router.get('/:id/transactions', adminAuth, async (req, res) => {
  try {
    const transactions = await db
      .select()
      .from(transactions)
      .where(eq(transactions.userId, req.params.id))
      .orderBy(desc(transactions.createdAt));

    res.json(transactions);
  } catch (error) {
    handleServerError(res, error, 'Failed to fetch transactions');
  }
});
```

**Frontend Implementation:**
```tsx
// client/src/components/UserManagement/UserWalletInfo.tsx
import { DataGrid, GridColDef } from '@mui/x-data-grid';

const columns: GridColDef[] = [
  { field: 'createdAt', headerName: 'Date', width: 150 },
  { field: 'type', headerName: 'Type', width: 100 },
  { field: 'amount', headerName: 'Amount', width: 120 },
  { field: 'status', headerName: 'Status', width: 120 },
  { field: 'description', headerName: 'Description', flex: 1 },
];

export const UserWalletInfo = ({ user }) => {
  const { data: transactions } = useQuery({
    queryKey: ['userTransactions', user.id],
    queryFn: () => apiClient.get(`/api/admin/users/${user.id}/transactions`)
  });

  return (
    <div className="space-y-4">
      <Typography variant="h6">Wallet Information</Typography>
      
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <Paper className="p-4">
          <Typography variant="subtitle2">Total Balance</Typography>
          <Typography variant="h5">${user.wallet?.balance}</Typography>
        </Paper>
        
        <Paper className="p-4">
          <Typography variant="subtitle2">Pending Transactions</Typography>
          <Typography variant="h5">
            {transactions?.filter(t => t.status === 'pending').length || 0}
          </Typography>
        </Paper>
      </div>

      <DataGrid
        rows={transactions || []}
        columns={columns}
        autoHeight
        pageSizeOptions={[5, 10, 25]}
        initialState={{
          pagination: { paginationModel: { pageSize: 10 } }
        }}
      />
    </div>
  );
};
```

### **Production Enhancements**
1. **Audit Logging System**
```typescript
// shared/schema.ts
export const auditLogs = pgTable('audit_logs', {
  id: uuid('id').primaryKey().defaultRandom(),
  userId: uuid('user_id').references(() => users.id),
  action: varchar('action', { length: 50 }).notNull(),
  targetType: varchar('target_type', { length: 50 }),
  targetId: uuid('target_id'),
  details: jsonb('details'),
  ipAddress: inet('ip_address'),
  userAgent: text('user_agent'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
});
```

2. **Export Functionality**
```typescript
// backend/src/routes/admin/users.ts
router.post('/export', adminAuth, async (req, res) => {
  const users = await fetchFilteredUsers(req.body.filters);
  
  const csv = users.map(user => ({
    Email: user.email,
    'First Name': user.firstName,
    'Last Name': user.lastName,
    Status: user.status,
    'KYC Status': user.kycStatus,
    'Registered At': user.createdAt
  }));

  res.setHeader('Content-Type', 'text/csv');
  res.setHeader('Content-Disposition', 'attachment; filename=users-export.csv');
  res.send(json2csv.parse(csv));
});
```

3. **Real-time Updates**
```tsx
// client/src/components/UserManagement/UserList.tsx
import { useSocket } from '@/context/SocketContext';

export const UserList = () => {
  const socket = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    socket?.on('user-updated', (updatedUser) => {
      queryClient.setQueryData(['users'], (old: User[]) => 
        old.map(u => u.id === updatedUser.id ? updatedUser : u)
      );
    });

    return () => {
      socket?.off('user-updated');
    };
  }, [socket, queryClient]);
};
```

**Implementation Strategy:**
1. Start with the core user filtering and status management
2. Implement audit logging for all admin actions
3. Add wallet/transaction integration
4. Develop export functionality
5. Add real-time updates through WebSockets
6. Implement comprehensive error handling and validation
7. Add performance optimizations (caching, pagination)

Would you like me to elaborate on any specific aspect or provide additional implementation details for particular components?