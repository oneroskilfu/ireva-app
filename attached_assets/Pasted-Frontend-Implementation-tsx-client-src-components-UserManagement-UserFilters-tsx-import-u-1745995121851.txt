Frontend Implementation:**
```tsx
// client/src/components/UserManagement/UserFilters.tsx
import { useForm } from 'react-hook-form';
import { Grid, Button, Chip } from '@mui/material';
import { DatePicker, MultiSelect } from '@/components/Form';

type Filters = {
  status: string[];
  kycStatus: string[];
  investorType: string[];
  search: string;
  createdAfter: Date | null;
};

export const UserFilters = ({ onSubmit }: { onSubmit: (filters: Filters) => void }) => {
  const { control, handleSubmit } = useForm<Filters>();

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <Grid container spacing={2}>
        <Grid item xs={12} md={4}>
          <MultiSelect
            name="status"
            control={control}
            label="Account Status"
            options={['active', 'suspended', 'deactivated']}
          />
        </Grid>
        
        <Grid item xs={12} md={4}>
          <MultiSelect
            name="kycStatus"
            control={control}
            label="KYC Status"
            options={['unverified', 'pending', 'verified', 'rejected']}
          />
        </Grid>

        <Grid item xs={12} md={4}>
          <DatePicker
            name="createdAfter"
            control={control}
            label="Registered After"
          />
        </Grid>

        <Grid item xs={12}>
          <div className="flex gap-2">
            <Button type="submit" variant="contained">
              Apply Filters
            </Button>
            <Button type="reset" variant="outlined">
              Clear
            </Button>
          </div>
        </Grid>
      </Grid>
    </form>
  );
};
```

### 2. Comprehensive User Detail View
**Backend Implementation:**
```typescript
// backend/src/routes/admin/users.ts
router.get('/:id', adminAuth, async (req, res) => {
  try {
    const user = await db
      .select()
      .from(users)
      .leftJoin(wallets, eq(users.id, wallets.userId))
      .where(eq(users.id, req.params.id));

    if (!user) return res.status(404).json({ error: 'User not found' });
    
    res.json({
      ...user,
      wallet: user.wallets[0] // Assuming 1:1 user-wallet relationship
    });
  } catch (error) {
    handleServerError(res, error, 'Failed to fetch user details');
  }
});

router.patch('/:id', adminAuth, async (req, res) => {
  const updates = pick(req.body, ['firstName', 'lastName', 'investorType']);
  
  try {
    const updatedUser = await db
      .update(users)
      .set({
        ...updates,
        updatedAt: new Date()
      })
      .where(eq(users.id, req.params.id))
      .returning();

    res.json(updatedUser[0]);
  } catch (error) {
    handleServerError(res, error, 'Failed to update user');
  }
});
```

**Frontend Implementation:**
```tsx
// client/src/components/UserManagement/UserDetail.tsx
import { useQuery, useMutation } from '@tanstack/react-query';
import { EditableField } from '@/components/EditableField';

export const UserDetail = ({ userId }: { userId: string }) => {
  const { data: user, isLoading, refetch } = useQuery({
    queryKey: ['user', userId],
    queryFn: () => apiClient.get(`/api/admin/users/${userId}`)
  });

  const { mutate: updateUser } = useMutation({
    mutationFn: (updates: Partial<User>) => 
      apiClient.patch(`/api/admin/users/${userId}`, updates),
    onSuccess: () => refetch()
  });

  if (isLoading) return <CircularProgress />;
  if (!user) return <Alert severity="error">User not found</Alert>;

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <EditableField
          label="First Name"
          value={user.firstName}
          onSave={(value) => updateUser({ firstName: value })}
        />
        
        <EditableField
          label="Last Name"
          value={user.lastName}
          onSave={(value) => updateUser({ lastName: value })}
        />
        
        <EditableField
          label="Investor Type"
          value={user.investorType}
          type="select"
          options={['retail', 'accredited']}
          onSave={(value) => updateUser({ investorType: value })}
        />
      </div>

      <Divider />

      <UserStatusManager user={user} onUpdate={refetch} />
      <UserWalletInfo user={user} />
    </div>
  );
};
```

### 3. Account Status Management System
**Backend Implementation:**
```typescript
// backend/src/routes/admin/users.ts
router.post('/:id/status', adminAuth, async (req, res) => {
  const { status } = req.body;
  const validStatuses = ['active', 'suspended', 'deactivated'];

  if (!validStatuses.includes(status)) {
    return res.status(400).json({ error: 'Invalid status value' });
  }

  try {
    const updatedUser = await db
      .update(users)
      .set({ 
        status,
        updatedAt: new Date()
      })
      .where(eq(users.id, req.params.id))
      .returning();

    // Audit log implementation
    await createAuditLog({
      userId: req.user.id,
      action: 'USER_STATUS_CHANGE',
      targetId: req.params.id,
      details: { newStatus: status }
    });

    res.json(updatedUser[0]);
  } catch (error) {
    handleServerError(res, error, 'Failed to update user status');
  }
});
```

**Frontend Implementation:**
```tsx
// client/src/components/UserManagement/UserStatusManager.tsx
import { useConfirm } from 'material-ui-confirm';

export const UserStatusManager = ({ user, onUpdate }) => {
  const confirm = useConfirm();
  
  const handleStatusChange = async (newStatus: string) => {
    try {
      await confirm({
        title: 'Confirm Status Change',
        description: `Are you sure you want to change this user's status to ${newStatus}?`,
        confirmationText: 'Confirm'
      });
      
      await apiClient.post(`/api/admin/users/${user.id}/status`, { status: newStatus });
      onUpdate();
    } catch (error) {
      // Error handling
    }
  };

  return (
    <div className="space-y-4">
      <Typography variant="h6">Account Status</Typography>
      <div className="flex items-center gap-4">
        <Chip 
          label={user.status} 
          color={
            user.status === 'active' ? 'success' : 
            user.status === 'suspended' ? 'warning' : 'error'
          }
        />
        
        <Select
          value={user.status}
          onChange={(e) => handleStatusChange(e.target.value)}
          sx={{ minWidth: 120 }}
        >
          <MenuItem value="active">Active</MenuItem>
          <MenuItem value="suspended">Suspended</MenuItem>
          <MenuItem value="deactivated">Deactivated</MenuItem>
        </Select>
      </div>
    </div>
  );
};
```