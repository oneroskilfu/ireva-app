import { Router, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import { storage } from '../storage';
import { User } from '@shared/schema';
import { verifyToken } from '../middleware/authMiddleware.new';

// Create router
const router = Router();

// JWT secret key (should be in environment variables)
const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret_key';

/**
 * Generate JWT token
 */
function generateToken(user: User): string {
  // Create token payload (don't include sensitive info like password)
  const payload = {
    id: user.id,
    username: user.username,
    role: user.role || 'user',
  };

  // Sign token with secret and set expiration
  return jwt.sign(payload, JWT_SECRET, { expiresIn: '24h' });
}

/**
 * @route POST /api/auth/register
 * @desc Register a new user
 * @access Public
 */
router.post('/register', async (req: Request, res: Response) => {
  try {
    console.log('Register request received:', req.body);
    
    const { username, password, email, firstName, lastName, phoneNumber } = req.body;

    // Check if user already exists
    const existingUser = await storage.getUserByUsername(username);
    if (existingUser) {
      return res.status(400).json({ message: 'Username already exists' });
    }

    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Create new user
    const newUser = await storage.createUser({
      username,
      password: hashedPassword,
      email,
      firstName,
      lastName,
      phoneNumber,
      role: 'user',
      createdAt: new Date(),
    });

    // Create token
    const token = generateToken(newUser);

    res.status(201).json({
      message: 'User registered successfully',
      token,
      user: {
        id: newUser.id,
        username: newUser.username,
        email: newUser.email,
        firstName: newUser.firstName,
        lastName: newUser.lastName,
        role: newUser.role,
      },
    });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ message: 'Server error during registration' });
  }
});

/**
 * @route POST /api/auth/login
 * @desc Authenticate user & get token
 * @access Public
 */
router.post('/login', async (req: Request, res: Response) => {
  try {
    console.log('Login request received:', { username: req.body.username });
    
    const { username, password } = req.body;

    // Find user
    const user = await storage.getUserByUsername(username);
    
    if (!user) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // Check password
    const isMatch = await bcrypt.compare(password, user.password);
    
    if (!isMatch) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // Create and send token
    const token = generateToken(user);

    res.json({
      message: 'Login successful',
      token,
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role || 'user',
      },
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'Server error during login' });
  }
});

/**
 * @route GET /api/auth/user
 * @desc Get current user data
 * @access Private
 */
router.get('/user', verifyToken, async (req: Request, res: Response) => {
  try {
    // The verifyToken middleware adds the JWT payload to the request
    const requestWithPayload = req as Request & { jwtPayload?: { id: number } };
    const userId = requestWithPayload.jwtPayload?.id;

    if (!userId) {
      return res.status(401).json({ message: 'User ID not found in token' });
    }

    // Get user data
    const user = await storage.getUser(userId);
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Return user data (excluding password)
    const { password, ...userData } = user;
    
    res.json(userData);
  } catch (error) {
    console.error('Get user error:', error);
    res.status(500).json({ message: 'Server error retrieving user data' });
  }
});

export default router;