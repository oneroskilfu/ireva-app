import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';

// JWT secret (in production, this should be in environment variables)
const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret_key';

// Define extended request interface with JWT payload
interface AuthenticatedRequest extends Request {
  jwtPayload?: {
    id: number;
    username: string;
    role: string;
    iat?: number;
    exp?: number;
  };
}

/**
 * Middleware to verify JWT token
 */
export function verifyToken(req: AuthenticatedRequest, res: Response, next: NextFunction) {
  console.log('Verifying token middleware');
  
  // Get token from Authorization header
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: 'No token provided' });
  }

  const token = authHeader.split(' ')[1];

  try {
    // Verify token
    const decoded = jwt.verify(token, JWT_SECRET);
    req.jwtPayload = decoded as AuthenticatedRequest['jwtPayload'];
    console.log('Token verified successfully, user:', req.jwtPayload.username);
    next();
  } catch (error) {
    console.error('Token verification failed:', error);
    return res.status(401).json({ message: 'Invalid or expired token' });
  }
}

/**
 * Middleware to require authentication
 */
export function requireAuth(req: AuthenticatedRequest, res: Response, next: NextFunction) {
  console.log('Require auth middleware');
  
  verifyToken(req, res, next);
}

/**
 * Middleware to protect routes based on role
 */
export function protectRole(roles: string[]) {
  console.log('Protect role middleware for roles:', roles);
  
  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    // First verify token
    verifyToken(req, res, (err) => {
      if (err) {
        return next(err);
      }

      // Check role
      const userRole = req.jwtPayload?.role;
      
      if (!userRole || !roles.includes(userRole)) {
        console.log('Access denied. User role:', userRole, 'Required roles:', roles);
        return res.status(403).json({ 
          message: 'Access denied. Insufficient permissions.', 
          userRole, 
          requiredRoles: roles 
        });
      }

      console.log('Role verification successful:', userRole);
      next();
    });
  };
}